package engine;

import java.util.concurrent.ExecutionException;

import org.apache.commons.lang3.StringUtils;

import com.github.ddth.id.RedisIdGenerator;

/**
 * Redis-implementation of {@link IIdEngine}.
 * 
 * <p>
 * IDs generated by this engine are:
 * <ul>
 * <li>Unique: Unique within the namespace.</li>
 * <li>Ascending: Next generated ID is larger than previous ones.</li>
 * <li>Serial: {@code next-id} = {@code previous-id + 1}!</li>
 * <li>Persistent: (*) backed by Redis.</li>
 * </ul>
 * <p/>
 * 
 * @author ThanhNB
 * @since 0.1.0
 */
public class RedisIdEngine implements IIdEngine {

    private final static String DEFAULT_PREFIX = "id-server-";
    private String prefix = DEFAULT_PREFIX;
    private RedisIdGenerator redisIdGenerator;

    protected String getPrefix() {
        return prefix;
    }

    public RedisIdEngine setPrefix(String prefix) {
        this.prefix = prefix;
        return this;
    }

    protected RedisIdGenerator getRedisIdGenerator() {
        return redisIdGenerator;
    }

    public RedisIdEngine setRedisIdGenerator(RedisIdGenerator redisIdGenerator) {
        this.redisIdGenerator = redisIdGenerator;
        return this;
    }

    /**
     * Init method
     * 
     * @return
     */
    public RedisIdEngine init() {
        if (StringUtils.isBlank(prefix)) {
            prefix = DEFAULT_PREFIX;
        }
        return this;
    }

    /**
     * Destroy method.
     */
    public void destroy() {
    }

    /**
     * {@inheritDoc}
     * 
     * @throws ExecutionException
     */
    @Override
    public long nextId(String namespace) throws ExecutionException {
        return redisIdGenerator.nextId(prefix + namespace);
    }

}
